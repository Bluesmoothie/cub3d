NSEO : 4 textures differentes
couleurs differenbtes sol/plafond
fleche g/d --> rotation camera
touches WASD --> déplacement caméra 
ESC --> quitte et ferme fenetre
Croix rouge --> fermer fenetre
images de la minilibx 

fichier de description : EXTENSION .CUB
map: 6 caracteres --> 0 pour espaces vides, 1 pour murs, SNWE pour position point de départ

map doit etre fermée pour etre valide --> pas forcément rectangulaire
fichier .cub --> fichier de texture/description des elements suivis de map

parsing
parser agrv --> 1 argument finissant par .cub 
fichier existant ou ouvrable 

fichier --> 
textures 

structure : 
north texture
/n 
east texture

couleurs sol/plafond 
0-255    , *3

MAP : 
espaces --> si != 1 --> error
uniquement 0 ou NWSE --> si NSEW en double --> error
si char[s] == \n et char[s - 1] != 1 --> error 

rayDir = vecteur de direction d'un rayon
map(X, Y) : current square of the map the ray is (int)
sideDist(X,Y) : initially the distance the ray has to travel from its start position to its start pos to the first x side or y side 
DeltaDist(X,Y) : distance the ray has to travel from a x or x to x+1 or y+1

deltaDistX = sqrt(1 + (rayDirY * rayDirY) / (rayDirX * rayDirX))
deltaDistY = sqrt(1 + (rayDirX * rayDirX) / (rayDirY * rayDirY))

simplified: 
deltaDistX = abs(1 / rayDirX)
deltaDistY = abs(1 / rayDirY)


      //which box of the map we're in
      int mapX = int(posX);
      int mapY = int(posY);

      //length of ray from current position to next x or y-side
      double sideDistX;--> 
      double sideDistY;

       //length of ray from one x or y-side to next x or y-side
      double deltaDistX = (rayDirX == 0) ? 1e30 : std::abs(1 / rayDirX);
      double deltaDistY = (rayDirY == 0) ? 1e30 : std::abs(1 / rayDirY);
      double perpWallDist;

      //what direction to step in x or y-direction (either +1 or -1)
      int stepX;--> if rayDirX < 0 --> stepX == -1 else stepX == +1
      int stepY;--> if rayDirY <0 --> stepY == -1 else stepY == +1

      int hit = 0; //was there a wall hit?
      int side; //was a NS or a EW wall hit?




